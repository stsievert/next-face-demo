webcam image width: 200px
speed increase from full size image (1280px width): 9x (1.46s)
=============================================================
Timer unit: 1e-06 s

Total time: 0.177321 s
File: myapp.py
Function: callback at line 91

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    91                                           @profile # what seems to be taking the longest is using/manipulating the image
    92                                           def callback(f):
    93                                               ''' Takes in an image file and then process it to be placed onto the map '''
    94
    95                                               #  img_name = "webcam.png"
    96                                               #  crop_image = True
    97                                               #  img = read_image(img_name)
    98         1      12678.0  12678.0      7.1      img = imageio.imread("imgs/calvin.png")[::-1, :]
    99         1        400.0    400.0      0.2      e.data_source.data.update(image=[img], dh=[WIDTH])
   100         1        139.0    139.0      0.1      w.text = "Thinking..."
   101         1          3.0      3.0      0.0      with f:
   102         1      66206.0  66206.0     37.3          img = imageio.imread(f.read())
   103         1          4.0      4.0      0.0          if img.shape[-1] == 3:
   104         1          2.0      2.0      0.0              shape = list(img.shape)
   105         1          1.0      1.0      0.0              shape[-1] += 1
   106         1          8.0      8.0      0.0              rgba = np.zeros(shape, dtype=img.dtype)
   107         1        238.0    238.0      0.1              rgba[..., :3] = img
   108         1         23.0     23.0      0.0              rgba[..., 3] = 255
   109         1         25.0     25.0      0.0              img = rgba
   110         1          3.0      3.0      0.0      img = img[::-1, :]
   111         1         34.0     34.0      0.0      print("IMG.SHAPE =", img.shape)
   112                                               #  imresize(img, out_shape, preserve_range=True)
   113         1          3.0      3.0      0.0      if min(img.shape[:2]) > 512:
   114                                                   scale = 512 / min(img.shape[:2])
   115                                                   _w, _h, _c = img.shape
   116                                                   out_shape = (int(_w * scale), int(_h * scale), _c)
   117                                                   img = imresize(img, out_shape, preserve_range=True).astype("uint8")
   118         1          8.0      8.0      0.0      print("IMG.SHAPE =", img.shape)
   119         1          5.0      5.0      0.0      with io.BytesIO() as f:
   120         1      37283.0  37283.0     21.0          imageio.imwrite(f, img, format="png")
   121         1          5.0      5.0      0.0          f.seek(0)
   122         1          1.0      1.0      0.0      try:
   123         1      23614.0  23614.0     13.3          y = predict('./webcam.png', verbose=True)
   124         1          2.0      2.0      0.0      except:
   125         1          4.0      4.0      0.0          err = sys.exc_info()[0]
   126         1         14.0     14.0      0.0          print("Error embedding face")
   127         1         16.0     16.0      0.0          print("**** EXCEPTION! show_plot.py#L95, error = \n{}".format(err))
   128         1       1584.0   1584.0      0.9          print(traceback.format_exc())
   129         1          2.0      2.0      0.0          crop_image = False
   130         1         30.0     30.0      0.0          y = np.random.randn(2)
   131         1        182.0    182.0      0.1          y /= np.linalg.norm(y) * 2
   132
   133         1          2.0      2.0      0.0      aspect_ratio = img.shape[0] / img.shape[1]
   134         1         18.0     18.0      0.0      e.data_source.data.update(
   135         1        324.0    324.0      0.2          x=[y[0]], y=[y[1]], image=[img]  # , dw=[WIDTH], dh=[WIDTH * aspect_ratio]
   136                                               )
   137         1      33826.0  33826.0     19.1      emotions = get_words.find_words(y)
   138         1         64.0     64.0      0.0      print("Predicted emotions:", emotions)
   139                                               # ds_words.data.update(x=y[0], y=y[1], text=", ".join(words))
   140         1        334.0    334.0      0.2      w.x = y[0]
   141         1        126.0    126.0      0.1      w.y = y[1]
   142         1        110.0    110.0      0.1      w.text = ", ".join(emotions)
