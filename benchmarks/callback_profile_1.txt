webcam image width: 1280px
speed increase from full size image (1280px width): 1x (0s)
=============================================================
Timer unit: 1e-06 s

Total time: 1.63724 s
File: myapp.py
Function: callback at line 88

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    88                                           @profile # what seems to be taking the longest is using/manipulating the image
    89                                           def callback(f):
    90                                               ''' Takes in an image file and then process it to be placed onto the map '''
    91
    92                                               #  img_name = "webcam.png"
    93                                               #  crop_image = True
    94                                               #  img = read_image(img_name)
    95         1      12550.0  12550.0      0.8      img = imageio.imread("imgs/calvin.png")[::-1, :]
    96         1        396.0    396.0      0.0      e.data_source.data.update(image=[img], dh=[WIDTH])
    97         1        375.0    375.0      0.0      w.text = "Thinking..."
    98         1          6.0      6.0      0.0      with f:
    99         1      95422.0  95422.0      5.8          img = imageio.imread(f.read())
   100         1          3.0      3.0      0.0          if img.shape[-1] == 3:
   101         1          2.0      2.0      0.0              shape = list(img.shape)
   102         1          2.0      2.0      0.0              shape[-1] += 1
   103         1        153.0    153.0      0.0              rgba = np.zeros(shape, dtype=img.dtype)
   104         1       8167.0   8167.0      0.5              rgba[..., :3] = img
   105         1        425.0    425.0      0.0              rgba[..., 3] = 255
   106         1         40.0     40.0      0.0              img = rgba
   107         1          3.0      3.0      0.0      img = img[::-1, :]
   108         1         36.0     36.0      0.0      print("IMG.SHAPE =", img.shape)
   109                                               #  imresize(img, out_shape, preserve_range=True)
   110         1          5.0      5.0      0.0      if min(img.shape[:2]) > 512:
   111         1          2.0      2.0      0.0          scale = 512 / min(img.shape[:2])
   112         1          1.0      1.0      0.0          _w, _h, _c = img.shape
   113         1          3.0      3.0      0.0          out_shape = (int(_w * scale), int(_h * scale), _c)
   114         1     128137.0 128137.0      7.8          img = imresize(img, out_shape, preserve_range=True).astype("uint8")
   115         1         43.0     43.0      0.0      print("IMG.SHAPE =", img.shape)
   116         1          6.0      6.0      0.0      with io.BytesIO() as f:
   117         1     839587.0 839587.0     51.3          imageio.imwrite(f, img, format="png")
   118         1        107.0    107.0      0.0          f.seek(0)
   119         1          1.0      1.0      0.0      try:
   120         1     523166.0 523166.0     32.0          y = predict('./webcam.png', verbose=True)
   121         1          2.0      2.0      0.0      except:
   122         1          3.0      3.0      0.0          err = sys.exc_info()[0]
   123         1         11.0     11.0      0.0          print("Error embedding face")
   124         1         13.0     13.0      0.0          print("**** EXCEPTION! show_plot.py#L95, error = \n{}".format(err))
   125         1       4870.0   4870.0      0.3          print(traceback.format_exc())
   126         1          2.0      2.0      0.0          crop_image = False
   127         1         31.0     31.0      0.0          y = np.random.randn(2)
   128         1        186.0    186.0      0.0          y /= np.linalg.norm(y) * 2
   129
   130         1          3.0      3.0      0.0      aspect_ratio = img.shape[0] / img.shape[1]
   131         1         16.0     16.0      0.0      e.data_source.data.update(
   132         1        290.0    290.0      0.0          x=[y[0]], y=[y[1]], image=[img]  # , dw=[WIDTH], dh=[WIDTH * aspect_ratio]
   133                                               )
   134         1      22715.0  22715.0      1.4      emotions = get_words.find_words(y)
   135         1         31.0     31.0      0.0      print("Predicted emotions:", emotions)
   136                                               # ds_words.data.update(x=y[0], y=y[1], text=", ".join(words))
   137         1        223.0    223.0      0.0      w.x = y[0]
   138         1        108.0    108.0      0.0      w.y = y[1]
   139         1         95.0     95.0      0.0      w.text = ", ".join(emotions)
