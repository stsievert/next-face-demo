webcam image width: 120px
speed increase from full size image (1280px width): 13x (1.5s)
=============================================================
Timer unit: 1e-06 s

Total time: 0.129825 s
File: myapp.py
Function: callback at line 94

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    94                                           @profile # what seems to be taking the longest is using/manipulating the image
    95                                           def callback(f):
    96                                               ''' Takes in an image file and then process it to be placed onto the map '''
    97
    98                                               #  img_name = "webcam.png"
    99                                               #  crop_image = True
   100                                               #  img = read_image(img_name)
   101         1      12544.0  12544.0      9.7      img = imageio.imread("imgs/calvin.png")[::-1, :]
   102         1        397.0    397.0      0.3      e.data_source.data.update(image=[img], dh=[WIDTH])
   103         1        145.0    145.0      0.1      w.text = "Thinking..."
   104         1          3.0      3.0      0.0      with f:
   105         1      70866.0  70866.0     54.6          img = imageio.imread(f.read())
   106         1          3.0      3.0      0.0          if img.shape[-1] == 3:
   107         1          2.0      2.0      0.0              shape = list(img.shape)
   108         1          2.0      2.0      0.0              shape[-1] += 1
   109         1          8.0      8.0      0.0              rgba = np.zeros(shape, dtype=img.dtype)
   110         1         90.0     90.0      0.1              rgba[..., :3] = img
   111         1         16.0     16.0      0.0              rgba[..., 3] = 255
   112         1         22.0     22.0      0.0              img = rgba
   113         1          4.0      4.0      0.0      img = img[::-1, :]
   114         1         33.0     33.0      0.0      print("IMG.SHAPE =", img.shape)
   115                                               #  imresize(img, out_shape, preserve_range=True)
   116         1          3.0      3.0      0.0      if min(img.shape[:2]) > 512:
   117                                                   scale = 512 / min(img.shape[:2])
   118                                                   _w, _h, _c = img.shape
   119                                                   out_shape = (int(_w * scale), int(_h * scale), _c)
   120                                                   img = imresize(img, out_shape, preserve_range=True).astype("uint8")
   121         1          9.0      9.0      0.0      print("IMG.SHAPE =", img.shape)
   122         1          5.0      5.0      0.0      with io.BytesIO() as f:
   123         1      10322.0  10322.0      8.0          imageio.imwrite(f, img, format="png")
   124         1          6.0      6.0      0.0          f.seek(0)
   125         1          2.0      2.0      0.0      try:
   126         1       8760.0   8760.0      6.7          y = predict('./webcam.png', verbose=True)
   127         1          3.0      3.0      0.0      except:
   128         1          6.0      6.0      0.0          err = sys.exc_info()[0]
   129         1         55.0     55.0      0.0          print("Error embedding face")
   130         1         20.0     20.0      0.0          print("**** EXCEPTION! show_plot.py#L95, error = \n{}".format(err))
   131         1       1058.0   1058.0      0.8          print(traceback.format_exc())
   132         1          1.0      1.0      0.0          crop_image = False
   133         1         49.0     49.0      0.0          y = np.random.randn(2)
   134         1        240.0    240.0      0.2          y /= np.linalg.norm(y) * 2
   135
   136         1          3.0      3.0      0.0      aspect_ratio = img.shape[0] / img.shape[1]
   137         1         18.0     18.0      0.0      e.data_source.data.update(
   138         1        385.0    385.0      0.3          x=[y[0]], y=[y[1]], image=[img]  # , dw=[WIDTH], dh=[WIDTH * aspect_ratio]
   139                                               )
   140         1      24209.0  24209.0     18.6      emotions = get_words.find_words(y)
   141         1         45.0     45.0      0.0      print("Predicted emotions:", emotions)
   142                                               # ds_words.data.update(x=y[0], y=y[1], text=", ".join(words))
   143         1        244.0    244.0      0.2      w.x = y[0]
   144         1        125.0    125.0      0.1      w.y = y[1]
   145         1        122.0    122.0      0.1      w.text = ", ".join(emotions)
